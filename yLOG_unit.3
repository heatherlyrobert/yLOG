.TH yLOG_unit· 3 2008-jul "linux" "interfacing with full library version"

.SH NAME
yLOG \- simple, consistent, and useful process execution debugging

.SH PATRON
clio-chrysafenios (flowering) greek muse of written and oral history

.SH IMAGERY
golden young woman holding a scroll, by a chest full of books

.SH SUMMARY (see yLOG (7) for more information)
yLOG and yLOG_uver allow standardized, structured, and configurable process
execution logging that helps me quickly understand program flow, isolate and
diagnose issues, and therefore, much more quickly fix trouble.

.SH SERIOUS FOREWARNING
i am a crazy, selfish, dog-fooding c-programmer.  my code tends to be
experimental and constantly evolving.  my point is NOT to be the best, it is
to challenge myself, build from scratch, and allow fast problem solving.

.SH DOCUMENTATION
.nf
yLOG (3)           interfacing with yLOG in general
yLOG_long (3)      interfacing with full library, long version
yLOG_short (3)     interfacing with full library, short version
yLOG_error (3)     interfacing with full library, error reporting
yLOG_spec (3)      interfacing with full library, specialty
yLOG_vol (3)       interfacing with full library, volume control
yLOG_unit (3)´´´´´´interfacing with full library, unit testing
yLOG_uver (3)      interfacing with micro, code-inclusion version
yLOG (6)           interactive usage and navigation of log files
yLOG (7)           decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) overview        quick summary
b) synopsis        function overview
c) unit test       interface for koios, unit testing framework

.SH A) OVERVIEW
yLOG unit testing support should not be used by programmers.  these functions
are an interface to "koios" my unit testing framework.

.SH B) SYNOPSIS
.nf
char     yLOG_unitcond (int <scrp>, int <cond>, int <line>, char* <desc>);
char     yLOG_unitstep (int <scrp>, int <cond>, int <step>, int <line>, char* <desc>);

.SH C) UNIT-TESTING
these two functions are used within my unit-testing software to interject
structure.  these should never be used by programmers.

.SS void yLOG_unit_cond (...)
creates a line describing the unit-testing condition

.SS void yLOG_unit_step (...)
creates a line describing the unit-testing step

.SH BUGS
yLOG is incredibly stable for me, but if anyone else used it it might explode
and take the universe with it.

.SH COLOPHON
this page is part of a documentation package meant to make the use of the
heatherly tools easier and faster
