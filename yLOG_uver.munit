/*===============================[[ beg-code ]]===============================*/

#include    "yLOG_solo.h"
#include    "yLOG_uver.h"

#include    <yUNIT_solo.h>

char
yLOG_uver_err_file   (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) openning and closing error file");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify quick success");
   yUNIT_minval  ("open to tmp file"                   , yLOG_ueopen   ()             ,    2);
   yUNIT_minval  ("write a test msg"                   , yLOG_uerr     ("testing")    ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_uelines  ()             ,    1);
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('[')          , "testing");
   yUNIT_minval  ("close the file"                     , yLOG_ueclose  ()             ,    0);
   yUNIT_minstr  ("check file deleted after"           , yLOG_uepeek   ('[')          , "(not found)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to write with unopen file");
   yUNIT_minval  ("write a test msg"                   , yLOG_uerr     ("testing")    , -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to close an unopen file");
   yUNIT_minval  ("close the file"                     , yLOG_ueclose  ()             ,    0);
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_err_msg   (char a_scrp, char a_list, char a_unit)
{
   char       *a_nscrp   = "/tmp/master.unit";
   char       *a_verb    = "GLOBAL";
   int         a_line    = 236;
   char       *a_prefix  = "GLOBAL (A)";
   char       *a_label   = "(A)";
   char       *x_label   = "leading";
   char        c         =   '(';
   char        a_char    =   '-';
   char       *a_example = "-A-";
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) writing formatted errors");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("open the file");
   yUNIT_minval  ("open to tmp file"                   , yLOG_ueopen   ()             ,    2);
   yUNIT_minval  ("check line count"                   , yLOG_uelines  ()             ,    0);
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify a single letter text message");
   yUNIT_minval  ("write a test msg"                   , yLOG_uerr     ("a")          ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_uelines  ()             ,    1);
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('[')          , "a");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify a single word text message");
   yUNIT_minval  ("write a test msg"                   , yLOG_uerr     ("happy")      ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_uelines  ()             ,    2);
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "happy");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify long sentence length message");
   yUNIT_minval  ("write a test msg"                   , yLOG_uerr     ("chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children"),    1);
   yUNIT_minval  ("check line count"                   , yLOG_uelines  ()             ,    3);
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "happy");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify single number in format");
   yUNIT_minval  ("write a test msg"                   , yLOG_uerr     ("%d chupacabras are running amok", 13),    1);
   yUNIT_minval  ("check line count"                   , yLOG_uelines  ()             ,    4);
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "happy");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "13 chupacabras are running amok");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify error format used in koios");
   yUNIT_minval  ("write a test msg"                   , yLOG_uerr     ("%s:%d:0: error: verb å%sæ from prefix å%sæ with label å%sæ has %s (%c) instead of (%c), e.g., å%sæ", a_nscrp, a_line, a_verb, a_prefix, a_label, x_label, c, a_char, a_example),    1);
   yUNIT_minval  ("check line count"                   , yLOG_uelines  ()             ,    5);
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "happy");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "13 chupacabras are running amok");
   yUNIT_minstr  ("check the mesg"                     , yLOG_uepeek   ('Ö')          , "/tmp/master.unit:236:0: error: verb åGLOBALæ from prefix åGLOBAL (A)æ with label å(A)æ has leading (() instead of (-), e.g., å-A-æ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing");
   yUNIT_minval  ("close the file"                     , yLOG_ueclose  ()             ,    0);
   yUNIT_minstr  ("check file deleted after"           , yLOG_uepeek   ('[')          , "(not found)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_file   (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) openning and closing logging file");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify quick success");
   yUNIT_minval  ("open to tmp file"                   , yLOG_uopen    ()             ,    1);
   yUNIT_minval  ("write a test msg"                   , yLOG_unote    ("new note")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    1);
   yUNIT_minstr  ("check the mesg"                     , yLOG_upeek    ('[')          , "new note");
   yUNIT_minval  ("close the file"                     , yLOG_uclose   ()             ,    0);
   yUNIT_minstr  ("check file deleted after"           , yLOG_upeek    ('[')          , "(not found)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to write with unopen file");
   yUNIT_minval  ("write a test msg"                   , yLOG_unote    ("another")    , -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to close an unopen file");
   yUNIT_minval  ("close the file"                     , yLOG_uclose   ()             ,    0);
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_struct (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) following logging structure");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , yLOG_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , yLOG_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("one")        ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a sub-function");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("two")        ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a sub-sub-function");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("three")      ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    3);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , yLOG_uexit    ("four")       ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    4);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering another function");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("five")       ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function with error");
   yUNIT_minval  ("call exitr"                         , yLOG_uexitr   ("six", -12)   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    7);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting with a NULL");
   yUNIT_minval  ("call exit"                          , yLOG_uexit    (NULL)         ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    8);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((NULL)))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering with a NULL");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   (NULL)         ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    9);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((NULL)))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting with a empty name, and good note");
   yUNIT_minval  ("call exitr"                         , yLOG_uexitr   ("", 5)        ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   11);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((empty)))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering with a empty name");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("")           ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   12);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((empty)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((empty)))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting twice to baseline");
   yUNIT_minval  ("call exit"                          , yLOG_uexit    ("eleven")     ,    1);
   yUNIT_minval  ("call exit"                          , yLOG_uexit    ("twelve")     ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   14);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((empty)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((empty)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (eleven)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "EXITING  (twelve)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to exit past baseline");
   yUNIT_minval  ("call exit"                          , yLOG_uexit    ("thirteen")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   15);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((NULL)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (((empty)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  ENTERING (((empty)))");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  EXITING  (eleven)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "EXITING  (twelve)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "EXITING  (thirteen)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , yLOG_uclose   ()             ,    0);
   yUNIT_minstr  ("check file deleted after"           , yLOG_upeek    ('[')          , "(not found)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_string (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) displaying string logging messages");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , yLOG_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , yLOG_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify writing a simple note");
   yUNIT_minval  ("call note"                          , yLOG_unote    ("checking on writing note")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt writing a NULL note");
   yUNIT_minval  ("call note"                          , yLOG_unote    (NULL)                         ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    3);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt writing an empty note");
   yUNIT_minval  ("call note"                          , yLOG_unote    ("")                           ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    4);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt writing a longer note with spaces");
   yUNIT_minval  ("call note"                          , yLOG_unote    ("test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious") ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify writing a simple string");
   yUNIT_minval  ("call info"                          , yLOG_uinfo    ("checking", "short note") ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    6);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify truncating subjects");
   yUNIT_minval  ("call info"                          , yLOG_uinfo    ("check a longer subject", "shortish note") ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    7);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt a NULL subject");       
   yUNIT_minval  ("call info"                          , yLOG_uinfo    (NULL      , "normal length note") ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    8);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt an empty subject");       
   yUNIT_minval  ("call info"                          , yLOG_uinfo    (""        , "normal length note, again") ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    9);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt a NULL content");       
   yUNIT_minval  ("call info"                          , yLOG_uinfo    ("checker" , NULL                       ) ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   10);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt an empty content");       
   yUNIT_minval  ("call info"                          , yLOG_uinfo    ("checked" , ""                         ) ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   11);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checked   : (empty)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify long content");       
   yUNIT_minval  ("call info"                          , yLOG_uinfo    ("weirdo"  , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children") ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   12);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checked   : (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  weirdo    : chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , yLOG_uexit    ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   13);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  checked   : (empty)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  weirdo    : chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "EXITING  (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , yLOG_uclose   ()             ,    0);
   yUNIT_minstr  ("check file deleted after"           , yLOG_upeek    ('[')          , "(not found)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_number (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) displaying string logging messages");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , yLOG_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , yLOG_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character");
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("input"   , 'A')   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character (title NULL)");
   yUNIT_minval  ("call char"                          , yLOG_uchar    (NULL      , 'B')   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    3);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character (title empty)");
   yUNIT_minval  ("call char"                          , yLOG_uchar    (""        , 'C')   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    4);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character (title truncated)");
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("abcdefghijklmnopqrstuvwxyz"        , 'D')   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing hidden characters");
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("0/null"  ,  0 )   ,    1);
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("escape"  , 27 )   ,    1);
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("enter"   , 10 )   ,    1);
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("field"   , 31 )   ,    1);
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("space"   , 32 )   ,    1);
   yUNIT_minval  ("call char"                          , yLOG_uchar    ("control" ,  6 )   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   11);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing values");
   yUNIT_minval  ("call small"                         , yLOG_uvalue   ("small"   ,  123 )        ,    1);
   yUNIT_minval  ("call large"                         , yLOG_uvalue   ("large"   ,  987654321)   ,    1);
   yUNIT_minval  ("call negative"                      , yLOG_uvalue   ("negative",  -65432)      ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   14);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing values (bad titles)");
   yUNIT_minval  ("call small"                         , yLOG_uvalue   (NULL                 ,  0   )   ,    1);
   yUNIT_minval  ("call large"                         , yLOG_uvalue   (""                   ,  +5  )   ,    1);
   yUNIT_minval  ("call negative"                      , yLOG_uvalue   ("123456789-123456789",  -6)     ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   17);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing pointers (bad titles)");
   yUNIT_minval  ("call pointer"                       , yLOG_upoint   (NULL                 ,  0   )       ,    1);
   yUNIT_minval  ("call pointer"                       , yLOG_upoint   (""                   ,  255 )       ,    1);
   yUNIT_minval  ("call pointer"                       , yLOG_upoint   ("123456789-123456789",  255 * 256)  ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   20);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : (nil)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : 0xff");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: 0xff00");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing pointers (larger numbers)");
   yUNIT_minval  ("call pointer"                       , yLOG_upoint   ("big"                ,  255 * 256 * 256 )       ,    1);
   yUNIT_minval  ("call pointer"                       , yLOG_upoint   ("bigger"             ,  (long) 255 * 256 * 256 * 256)       ,    1);
   yUNIT_minval  ("call pointer"                       , yLOG_upoint   ("biggerest"          ,  (long) 255 * 256 * 256 * 256 * 256)  ,    1);
   yUNIT_minval  ("call pointer"                       , yLOG_upoint   ("huge"               ,  (long) 255 * 256 * 256 * 256 * 256 * 256 * 256 * 256)  ,    1);
   yUNIT_minval  ("call negative"                      , yLOG_upoint   ("negative"           ,  -1)                                 ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   25);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : (nil)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : 0xff");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: 0xff00");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  big       : 0xff0000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  bigger    : 0xff000000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  biggerest : 0xff00000000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  huge      : 0xff00000000000000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  negative  : 0xffffffffffffffff");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , yLOG_uexit    ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,   26);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : (nil)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : 0xff");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: 0xff00");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  big       : 0xff0000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  bigger    : 0xff000000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  biggerest : 0xff00000000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  huge      : 0xff00000000000000");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  negative  : 0xffffffffffffffff");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "EXITING  (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , yLOG_uclose   ()             ,    0);
   yUNIT_minstr  ("check file deleted after"           , yLOG_upeek    ('[')          , "(not found)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_complex (char a_scrp, char a_list, char a_unit)
{
   char       *a_nscrp   = "/tmp/master.unit";
   char       *a_verb    = "GLOBAL";
   int         a_line    = 236;
   char       *a_prefix  = "GLOBAL (A)";
   char       *a_label   = "(A)";
   char       *x_label   = "leading";
   char        c         =   '(';
   char        a_char    =   '-';
   char       *a_example = "-A-";
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) displaying string logging messages");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , yLOG_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , yLOG_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , yLOG_uenter   ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing literal");
   yUNIT_minval  ("call complex"                       , yLOG_ucomplex ("complex" , "testing")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify trouble with titles");
   yUNIT_minval  ("call complex"                       , yLOG_ucomplex (NULL      , "testing")   ,    1);
   yUNIT_minval  ("call complex"                       , yLOG_ucomplex (""        , "testing")   ,    1);
   yUNIT_minval  ("call complex"                       , yLOG_ucomplex ("123456789-12345" , "testing")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple char format use");
   yUNIT_minval  ("call complex"                       , yLOG_ucomplex ("format"  , "test%cing", '-')   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    6);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify strings in format");
   yUNIT_minval  ("call complex"                       , yLOG_ucomplex ("strings" , "%s/%s", "one", "two")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    7);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  strings   : one/two");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify complex string");
   yUNIT_minval  ("write a test msg"                   , yLOG_ucomplex ("error"     , "%s:%d:0: error: verb å%sæ from prefix å%sæ with label å%sæ has %s (%c) instead of (%c), e.g., å%sæ", a_nscrp, a_line, a_verb, a_prefix, a_label, x_label, c, a_char, a_example),    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    8);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  strings   : one/two");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  error     : /tmp/master.unit:236:0: error: verb åGLOBALæ from prefix åGLOBAL (A)æ with label å(A)æ has leading (() instead of (-), e.g., å-A-æ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , yLOG_uexit    ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , yLOG_ulines   ()             ,    9);
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  strings   : one/two");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "´  error     : /tmp/master.unit:236:0: error: verb åGLOBALæ from prefix åGLOBAL (A)æ with label å(A)æ has leading (() instead of (-), e.g., å-A-æ");
   yUNIT_minstr  ("check line"                         , yLOG_upeek    ('Ö')          , "EXITING  (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , yLOG_uclose   ()             ,    0);
   yUNIT_minstr  ("check file deleted after"           , yLOG_upeek    ('[')          , "(not found)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", mylog_oneline);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(scripts)------------------------*/
   yLOG_uver_err_file    (++n, x_list, x_unit);
   yLOG_uver_err_msg     (++n, x_list, x_unit);
   yLOG_uver_log_file    (++n, x_list, x_unit);
   yLOG_uver_log_struct  (++n, x_list, x_unit);
   yLOG_uver_log_string  (++n, x_list, x_unit);
   yLOG_uver_log_number  (++n, x_list, x_unit);
   yLOG_uver_log_complex (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

