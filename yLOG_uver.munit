/*===============================[[ beg-code ]]===============================*/

#include    <yENV_solo.h>
#include    <yENV_uver.h>

#include    "yLOG_solo.h"
#include    "yLOG_uver.h"

#include    <yUNIT_solo.h>

char
yLOG_uver_err_file   (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) openning and closing error file");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("attempt to close a never unopen file");
   yUNIT_minval  ("close the file"                     , yerr_udone   ()             , -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify openning file");
   yUNIT_minval  ("open to tmp file"                   , yerr_uopen   ()             ,    2);
   yUNIT_minstr  ("... check which"                    , yerr_uwhich  ()             , "/tmp/ylog_errors.txt");
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    0);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify adding to error file");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("testing")    ,    1);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    1);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing error file");
   yUNIT_minval  ("close the file"                     , yerr_uclose  ()             ,    0);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    1);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify deleting the file");
   yUNIT_minval  ("open to tmp file"                   , yerr_uopen   ()             ,    2);
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("testing")    ,    1);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    1);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "testing");
   yUNIT_minval  ("close/delete the file"              , yerr_udone   ()             ,    3);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             , -999);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to write with unopen file");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("testing")    , -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to close an unopen file");
   yUNIT_minval  ("close the file"                     , yerr_udone   ()             , -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify creating a small file");
   yUNIT_minval  ("open to tmp file"                   , yerr_uopen   ()             ,    2);
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("one")        ,    1);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    1);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "one");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify re-openning the file");
   yUNIT_minval  ("open to tmp file"                   , yerr_uopen   ()             ,    2);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    0);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "(n/a)");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("two")        ,    1);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    1);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "two");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify resetting the file");
   yUNIT_minval  ("open to tmp file"                   , yerr_ureset  ()             ,    4);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    0);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "(n/a)");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("three")      ,    1);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             ,    1);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "three");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify deleting the file");
   yUNIT_minval  ("close/delete the file"              , yerr_udone   ()             ,    3);
   yUNIT_minval  ("... check count"                    , yerr_ulines  ()             , -999);
   yUNIT_minstr  ("... check line"                     , yerr_upeek   ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_err_msg   (char a_scrp, char a_list, char a_unit)
{
   char       *a_nscrp   = "/tmp/master.unit";
   char       *a_verb    = "GLOBAL";
   int         a_line    = 236;
   char       *a_prefix  = "GLOBAL (A)";
   char       *a_label   = "(A)";
   char       *x_label   = "leading";
   char        c         =   '(';
   char        a_char    =   '-';
   char       *a_example = "-A-";
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) writing formatted errors");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("open the file");
   yUNIT_minval  ("open to tmp file"                   , yerr_uopen   ()             ,    2);
   yUNIT_minval  ("check line count"                   , yerr_ulines  ()             ,    0);
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify a single letter text message");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("a")          ,    1);
   yUNIT_minval  ("check line count"                   , yerr_ulines  ()             ,    1);
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('[')          , "a");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify a single word text message");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("happy")      ,    1);
   yUNIT_minval  ("check line count"                   , yerr_ulines  ()             ,    2);
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "happy");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify long sentence length message");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children"),    1);
   yUNIT_minval  ("check line count"                   , yerr_ulines  ()             ,    3);
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "happy");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify single number in format");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("%d chupacabras are running amok", 13),    1);
   yUNIT_minval  ("check line count"                   , yerr_ulines  ()             ,    4);
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "happy");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "13 chupacabras are running amok");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify error format used in koios");
   yUNIT_minval  ("write a test msg"                   , yerr_uerror   ("%s:%d:0: error: verb å%sæ from prefix å%sæ with label å%sæ has %s (%c) instead of (%c), e.g., å%sæ", a_nscrp, a_line, a_verb, a_prefix, a_label, x_label, c, a_char, a_example),    1);
   yUNIT_minval  ("check line count"                   , yerr_ulines  ()             ,    5);
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('[')          , "a");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "happy");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "13 chupacabras are running amok");
   yUNIT_minstr  ("check the mesg"                     , yerr_upeek   ('Ö')          , "/tmp/master.unit:236:0: error: verb åGLOBALæ from prefix åGLOBAL (A)æ with label å(A)æ has leading (() instead of (-), e.g., å-A-æ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing");
   yUNIT_minval  ("close the file"                     , yerr_udone   ()             ,    3);
   yUNIT_minval  ("check line count"                   , yerr_ulines  ()             , -999);
   yUNIT_minstr  ("check file deleted after"           , yerr_upeek   ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_file   (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) openning and closing logging file");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning file");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minstr  ("... check which"                    , ylog_uwhich   ()             , "/tmp/ylog_micro.ulog");
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    0);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify adding to file");
   yUNIT_minval  ("write a test msg"                   , ylog_unote    ("testing")    ,    1);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing file");
   yUNIT_minval  ("close the file"                     , ylog_uclose   ()             ,    0);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify deleting the file");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minval  ("write a test msg"                   , ylog_unote    ("testing")    ,    1);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "testing");
   yUNIT_minval  ("close/delete the file"              , ylog_udone    ()             ,    3);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             , -999);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to write with unopen file");
   yUNIT_minval  ("write a test msg"                   , ylog_unote    ("testing")    , -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to close an unopen file");
   yUNIT_minval  ("close the file"                     , ylog_udone    ()             , -999);
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify creating a small file");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minval  ("write a test msg"                   , ylog_unote    ("one")        ,    1);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "one");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify re-openning the file");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    0);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "(n/a)");
   yUNIT_minval  ("write a test msg"                   , ylog_unote    ("two")        ,    1);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "two");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify resetting the file");
   yUNIT_minval  ("open to tmp file"                   , ylog_ureset   ()             ,    4);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    0);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "(n/a)");
   yUNIT_minval  ("write a test msg"                   , ylog_unote    ("three")      ,    1);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "three");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify deleting the file");
   yUNIT_minval  ("close/delete the file"              , ylog_udone    ()             ,    3);
   yUNIT_minval  ("... check count"                    , ylog_ulines   ()             , -999);
   yUNIT_minstr  ("... check line"                     , ylog_upeek    ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_prefix (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) verify prefix creation (ylog__uprefix");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify simple success");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (0) , "");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify next");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (1) , "´  ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify more complex");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (2) , "´··´  ");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (3) , "´··´··´  ");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (4) , "´··´··´··´  ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt negative");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (-1), "");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (-5), "");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (-9), "");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify maximum");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (10), "´··´··´··´··´··´··´··´··´··´  ");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (11), "´··´··´··´··´··´··´··´··´··´  ");
   yUNIT_minstr  ("call prefix"                        , ylog__uprefix (12), "´··´··´··´··´··´··´··´··´··´  ");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_check  (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) verify string testing (ylog__ustring)");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify simple success");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('f',  "test"        ) , "test");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify function");
   yUNIT_minstr  ("call string (null)"                 , ylog__ustring ('f',  NULL          ) , "(NULL)");
   yUNIT_minstr  ("call string (empty)"                , ylog__ustring ('f',  ""            ) , "(empty)");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('f',  "t"           ) , "t");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('f',  "test"        ) , "test");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('f',  "test_function") , "test_function");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('f',  "test_function_one_hundred") , "test_function_one_hundred");
   yUNIT_minstr  ("call string (long)"                 , ylog__ustring ('f',  "test_function_one_hundred_thirty_seven") , "test_function_one_hundred_thirty_seven");
   yUNIT_minstr  ("call string (too long)"             , ylog__ustring ('f',  "test_function_one_hundred_thirty_seven_eighty_eight") , "test_function_one_hundred_thirty_seven_eighty_ei>");
   yUNIT_minstr  ("call string (way too long)"         , ylog__ustring ('f',  "test_function_one_hundred_thirty_seven_eighty_eight_one_hundred_thirty_seven_eighty_eight") , "test_function_one_hundred_thirty_seven_eighty_ei>");
   yUNIT_minstr  ("call string (super way too long)"   , ylog__ustring ('f',  "test_function_one_hundred_thirty_seven_eighty_eight_one_hundred_thirty_seven_eighty_eight_one_hundred_thirty_seven_eighty_eight_one_hundred_thirty_seven_eighty_eight") , "test_function_one_hundred_thirty_seven_eighty_ei>");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify unknown type");
   yUNIT_minstr  ("call string (null)"                 , ylog__ustring ('F',  NULL          ) , "(NULL)");
   yUNIT_minstr  ("call string (empty)"                , ylog__ustring ('F',  ""            ) , "(empty)");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('F',  "type"        ) , "(bad_type)");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('2',  "type"        ) , "(bad_type)");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('/',  "type"        ) , "(bad_type)");
   yUNIT_minstr  ("call string"                        , ylog__ustring ( 0 ,  "type"        ) , "(bad_type)");

   yUNIT_mincond ("verify label");
   yUNIT_minstr  ("call string (null)"                 , ylog__ustring ('l',  NULL          ) , "(NULL)");
   yUNIT_minstr  ("call string (empty)"                , ylog__ustring ('l',  ""            ) , "(empty)");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('l',  "l"           ) , "l");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('l',  "label"       ) , "label");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('l',  "super_label" ) , "super_label");
   yUNIT_minstr  ("call string (exact)"                , ylog__ustring ('l',  "supercalifrag_label" ) , "supercalifrag_label");
   yUNIT_minstr  ("call string (too long)"             , ylog__ustring ('l',  "supercalifragilistic_label" ) , "supercalifragilist>");
   yUNIT_minstr  ("call string (way too long)"         , ylog__ustring ('l',  "supercalifragilisticexpealadocious_label" ) , "supercalifragilist>");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify data");
   yUNIT_minstr  ("call string (null)"                 , ylog__ustring ('d',  NULL          ) , "(NULL)");
   yUNIT_minstr  ("call string (empty)"                , ylog__ustring ('d',  ""            ) , "(empty)");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('d',  "d"           ) , "d");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('d',  "data"        ) , "data");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('d',  "good data"   ) , "good data");
   yUNIT_minstr  ("call string"                        , ylog__ustring ('d',  "chupacabras are very creepy") , "chupacabras are very creepy");
   yUNIT_minstr  ("call string (long"                  , ylog__ustring ('d',  "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children") , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_minstr  ("call string (too long)"             , ylog__ustring ('d',  "chupacabras are a very spooky legend of blood-sucking proto-humans who come in the night and steal naughty children.  now, while that might sound quite scary and unjust, since it is just the naughty children and they've been warned, maybe it makes sense."), "chupacabras are a very spooky legend of blood-sucking proto-humans who come in the night and steal naughty children.  now, while that might sound quite scary and unjust, since it is just the naughty>");

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_struct (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) following logging structure");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , ylog_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("one")        ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a sub-function");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("two")        ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a sub-sub-function");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("three")      ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    3);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , ylog_uexit    ("four")       ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    4);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering another function");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("five")       ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function with error");
   yUNIT_minval  ("call exitr"                         , ylog_uexitr   ("six", -12)   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    7);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting with a NULL");
   yUNIT_minval  ("call exit"                          , ylog_uexit    (NULL)         ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    8);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((NULL))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering with a NULL");
   yUNIT_minval  ("call enter"                         , ylog_uenter   (NULL)         ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    9);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((NULL))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting with a empty name, and good note");
   yUNIT_minval  ("call exitr"                         , ylog_uexitr   ("", 5)        ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   11);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((empty))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering with a empty name");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("")           ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   12);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((empty))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((empty))");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting twice to baseline");
   yUNIT_minval  ("call exit"                          , ylog_uexit    ("eleven")     ,    1);
   yUNIT_minval  ("call exit"                          , ylog_uexit    ("twelve")     ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   14);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((empty))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((empty))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  (eleven)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "EXITING  (twelve)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt to exit past baseline");
   yUNIT_minval  ("call exit"                          , ylog_uexit    ("thirteen")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   15);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (one)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING (two)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (three)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (four)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  ENTERING (five)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´··´  WARNING, rce (-12)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  EXITING  (six)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((NULL))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´··´  RETURN,  rc  (5)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  ((empty))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  ENTERING ((empty))");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  EXITING  (eleven)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "EXITING  (twelve)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "EXITING  (thirteen)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , ylog_udone    ()             ,    3);
   yUNIT_minstr  ("check file deleted after"           , ylog_upeek    ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_string (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) displaying string logging messages");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , ylog_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify writing a simple note");
   yUNIT_minval  ("call note"                          , ylog_unote    ("checking on writing note")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt writing a NULL note");
   yUNIT_minval  ("call note"                          , ylog_unote    (NULL)                         ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    3);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt writing an empty note");
   yUNIT_minval  ("call note"                          , ylog_unote    ("")                           ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    4);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt writing a longer note with spaces");
   yUNIT_minval  ("call note"                          , ylog_unote    ("test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious") ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify writing a simple string");
   yUNIT_minval  ("call info"                          , ylog_uinfo    ("checking", "short note") ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    6);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify truncating subjects");
   yUNIT_minval  ("call info"                          , ylog_uinfo    ("check a longer subject", "shortish note") ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    7);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt a NULL subject");       
   yUNIT_minval  ("call info"                          , ylog_uinfo    (NULL      , "normal length note") ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    8);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt an empty subject");       
   yUNIT_minval  ("call info"                          , ylog_uinfo    (""        , "normal length note, again") ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    9);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt a NULL content");       
   yUNIT_minval  ("call info"                          , ylog_uinfo    ("checker" , NULL                       ) ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   10);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("attempt an empty content");       
   yUNIT_minval  ("call info"                          , ylog_uinfo    ("checked" , ""                         ) ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   11);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checked   : (empty)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify long content");       
   yUNIT_minval  ("call info"                          , ylog_uinfo    ("weirdo"  , "chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children") ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   12);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checked   : (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  weirdo    : chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , ylog_uexit    ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   13);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking on writing note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  test abcdefghijklmnopqrstuvwxyz supercalifragatisticexpialadocious");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checking  : short note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  check a lo: shortish note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : normal length note");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : normal length note, again");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checker   : (NULL)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  checked   : (empty)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  weirdo    : chupacabras are a very creepy legend of a blood drinking, goat-sucking, proto-human who comes in the night and steals small children");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "EXITING  (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , ylog_udone    ()             ,    3);
   yUNIT_minstr  ("check file deleted after"           , ylog_upeek    ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_number (char a_scrp, char a_list, char a_unit)
{
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) displaying string logging messages");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , ylog_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character");
   yUNIT_minval  ("call char"                          , ylog_uchar    ("input"   , 'A')   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character (title NULL)");
   yUNIT_minval  ("call char"                          , ylog_uchar    (NULL      , 'B')   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    3);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character (title empty)");
   yUNIT_minval  ("call char"                          , ylog_uchar    (""        , 'C')   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    4);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing a character (title truncated)");
   yUNIT_minval  ("call char"                          , ylog_uchar    ("abcdefghijklmnopqrstuvwxyz"        , 'D')   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing hidden characters");
   yUNIT_minval  ("call char"                          , ylog_uchar    ("0/null"  ,  0 )   ,    1);
   yUNIT_minval  ("call char"                          , ylog_uchar    ("escape"  , 27 )   ,    1);
   yUNIT_minval  ("call char"                          , ylog_uchar    ("enter"   , 10 )   ,    1);
   yUNIT_minval  ("call char"                          , ylog_uchar    ("field"   , 31 )   ,    1);
   yUNIT_minval  ("call char"                          , ylog_uchar    ("space"   , 32 )   ,    1);
   yUNIT_minval  ("call char"                          , ylog_uchar    ("control" ,  6 )   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   11);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing values");
   yUNIT_minval  ("call small"                         , ylog_uvalue   ("small"   ,  123 )        ,    1);
   yUNIT_minval  ("call large"                         , ylog_uvalue   ("large"   ,  987654321)   ,    1);
   yUNIT_minval  ("call negative"                      , ylog_uvalue   ("negative",  -65432)      ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   14);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing values (bad titles)");
   yUNIT_minval  ("call small"                         , ylog_uvalue   (NULL                 ,  0   )   ,    1);
   yUNIT_minval  ("call large"                         , ylog_uvalue   (""                   ,  +5  )   ,    1);
   yUNIT_minval  ("call negative"                      , ylog_uvalue   ("123456789-123456789",  -6)     ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   17);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing pointers (bad titles)");
   yUNIT_minval  ("call pointer"                       , ylog_upoint   (NULL                 ,  0   )       ,    1);
   yUNIT_minval  ("call pointer"                       , ylog_upoint   (""                   ,  255 )       ,    1);
   yUNIT_minval  ("call pointer"                       , ylog_upoint   ("123456789-123456789",  255 * 256)  ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   20);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : (nil)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : 0xff");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: 0xff00");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing pointers (larger numbers)");
   yUNIT_minval  ("call pointer"                       , ylog_upoint   ("big"                ,  255 * 256 * 256 )       ,    1);
   yUNIT_minval  ("call pointer"                       , ylog_upoint   ("bigger"             ,  (long) 255 * 256 * 256 * 256)       ,    1);
   yUNIT_minval  ("call pointer"                       , ylog_upoint   ("biggerest"          ,  (long) 255 * 256 * 256 * 256 * 256)  ,    1);
   yUNIT_minval  ("call pointer"                       , ylog_upoint   ("huge"               ,  (long) 255 * 256 * 256 * 256 * 256 * 256 * 256 * 256)  ,    1);
   yUNIT_minval  ("call negative"                      , ylog_upoint   ("negative"           ,  -1)                                 ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   25);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : (nil)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : 0xff");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: 0xff00");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  big       : 0xff0000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  bigger    : 0xff000000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  biggerest : 0xff00000000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  huge      : 0xff00000000000000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  negative  : 0xffffffffffffffff");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , ylog_uexit    ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,   26);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  input     : A");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : B");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : C");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  abcdefghij: D");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  0/null    : £");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  escape    : ¥");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  enter     : ¦");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  field     : §");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  space     : ·");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  control   : Ï");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  small     : 123");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  large     : 987654321");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  negative  : -65432");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : 0");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : 5");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: -6");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : (nil)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : 0xff");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: 0xff00");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  big       : 0xff0000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  bigger    : 0xff000000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  biggerest : 0xff00000000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  huge      : 0xff00000000000000");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  negative  : 0xffffffffffffffff");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "EXITING  (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , ylog_udone    ()             ,    3);
   yUNIT_minstr  ("check file deleted after"           , ylog_upeek    ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
yLOG_uver_log_complex (char a_scrp, char a_list, char a_unit)
{
   char       *a_nscrp   = "/tmp/master.unit";
   char       *a_verb    = "GLOBAL";
   int         a_line    = 236;
   char       *a_prefix  = "GLOBAL (A)";
   char       *a_label   = "(A)";
   char       *x_label   = "leading";
   char        c         =   '(';
   char        a_char    =   '-';
   char       *a_example = "-A-";
   /*---(header)-------------------------*/
   yUNIT_minscrpy ("yLOG", "yLOG_uver", "(UVER) displaying string logging messages");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;

   yUNIT_mincond ("verify openning log");
   yUNIT_minval  ("open to tmp file"                   , ylog_uopen    ()             ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    0);
   yUNIT_minstr  ("check empty"                        , ylog_upeek    ('[')          , "(n/a)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify entering a function");
   yUNIT_minval  ("call enter"                         , ylog_uenter   ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    1);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify showing literal");
   yUNIT_minval  ("call complex"                       , ylog_ucomplex ("complex" , "testing")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    2);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify trouble with titles");
   yUNIT_minval  ("call complex"                       , ylog_ucomplex (NULL      , "testing")   ,    1);
   yUNIT_minval  ("call complex"                       , ylog_ucomplex (""        , "testing")   ,    1);
   yUNIT_minval  ("call complex"                       , ylog_ucomplex ("123456789-12345" , "testing")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    5);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify simple char format use");
   yUNIT_minval  ("call complex"                       , ylog_ucomplex ("format"  , "test%cing", '-')   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    6);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify strings in format");
   yUNIT_minval  ("call complex"                       , ylog_ucomplex ("strings" , "%s/%s", "one", "two")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    7);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  strings   : one/two");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify complex string");
   yUNIT_minval  ("write a test msg"                   , ylog_ucomplex ("error"     , "%s:%d:0: error: verb å%sæ from prefix å%sæ with label å%sæ has %s (%c) instead of (%c), e.g., å%sæ", a_nscrp, a_line, a_verb, a_prefix, a_label, x_label, c, a_char, a_example),    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    8);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  strings   : one/two");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  error     : /tmp/master.unit:236:0: error: verb åGLOBALæ from prefix åGLOBAL (A)æ with label å(A)æ has leading (() instead of (-), e.g., å-A-æ");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify exiting a function");
   yUNIT_minval  ("call exit"                          , ylog_uexit    ("critical")   ,    1);
   yUNIT_minval  ("check line count"                   , ylog_ulines   ()             ,    9);
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('[')          , "ENTERING (critical)");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  complex   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (NULL)    : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  (empty)   : testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  123456789-: testing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  format    : test-ing");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  strings   : one/two");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "´  error     : /tmp/master.unit:236:0: error: verb åGLOBALæ from prefix åGLOBAL (A)æ with label å(A)æ has leading (() instead of (-), e.g., å-A-æ");
   yUNIT_minstr  ("check line"                         , ylog_upeek    ('Ö')          , "EXITING  (critical)");
   yUNIT_mindnoc ();

   yUNIT_mincond ("verify closing log");
   yUNIT_minval  ("close the file"                     , ylog_udone    ()             ,    3);
   yUNIT_minstr  ("check file deleted after"           , ylog_upeek    ('[')          , "(missing)");
   yUNIT_mindnoc ();

   yUNIT_minprcs ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", mylog_oneline);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(scripts)------------------------*/
   yLOG_uver_err_file    (++n, x_list, x_unit);
   yLOG_uver_err_msg     (++n, x_list, x_unit);
   yLOG_uver_log_file    (++n, x_list, x_unit);
   yLOG_uver_log_prefix  (++n, x_list, x_unit);
   yLOG_uver_log_check   (++n, x_list, x_unit);
   yLOG_uver_log_struct  (++n, x_list, x_unit);
   yLOG_uver_log_string  (++n, x_list, x_unit);
   yLOG_uver_log_number  (++n, x_list, x_unit);
   yLOG_uver_log_complex (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

